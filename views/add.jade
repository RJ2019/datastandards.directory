html
  head
    title Contribute
    include head.jade
    // custom JS functions
    script(src='/javascripts/add.js')
    script(src='/javascripts/post-contribution.js')
    script(src='/javascripts/get-tags.js')
  body
    .container
      include header.jade
      .site-content
        h1.title Add Standard
        .text-container.form.form-add
          h2.form-info 
            form.add-standard
              p.metadata
                label(for='input6') ID
                input#input6.form-input(name='id', type='text', value='999')
              p.shortform
                label.form-label(for='input0') Name
                input#input0.form-input(name='name', type='text', placeholder='Input a description of the standard', value='')
              p.shortform
                label(for='input8') URL to Website 
                input#input8.form-input(name='website', type='text', placeholder="Copy a URL link to the standard's website", value='')
              p.shortform
                label(for='email') E-mail
                input#email.form-input(type='email', placeholder='Input your email [optional]', name='email', value='')
              p#tag-display.shortform
                label(for='tag', style='margin-right: 10px') Tags
                button.tag(type='button', value='keyword: user contribution') <b>Keyword:</b> user contribution
              p.metadata
                input#tags.form-input(name='tags', type-'text', value='')
              p.shortform
                label(for='facet') Facet
                a(data-toggle='tooltip', title='Facets lend additional meaning to tags. If a tag is describing a particular characteristic of an open data standard (a facet), all other tags describing the same characteristic can be grouped within the same facet. Facets also allow users to filter search results by desired facet values.')
                  i.fa.fa-question-circle(aria-hidden='true')
                select#facet.form-input(name='facet', type='drop-down')
                  option(disabled='', selected='', value='') Select a facet
                  option(value='subject') Subject: 
                  option(value='dataType') Data Type: 
                  option(value='providerType') Provider Type: 
                  option(value='language') Language: 
                  option(value='keyword') Keyword: 
              p#add-tag-options.shortform(style='display: none')
                label(for='tag-value') New Tag
                a#facet-tooltip(data-toggle='tooltip', title='no facet selected')
                  i.fa.fa-question-circle(aria-hidden='true')
                button#add-tag-button.small(type='button') Add Tag
                input#tag-value.form-input(name='tag', type='text', onfocus='this.value=""', placeholder='Input a value (tag) for this facet', value='')
                label#facet-label Facet:              
              .hide-show
                i.fa.fa-plus-circle
                | Complete long form
              p
                label.form-label(for='input1')
                  strong Category 
                select#input1.form-input(type='drop-down', name='category')
                  option(value='') Select a category
              p.category(style='display: none')
                label.form-label(for='input1-other') Other Category
                input#input1-other.form-input(name='', type='text', placeholder='Enter the category', value='')
              p
                label.form-label(for='input41')
                  strong Subcategory 
                select#input41.form-input(type='drop-down', name='subcategory')
                  option(value='') Select a subcategory
              p.subcategory(style='display: none')
                label.form-label(for='input41-other') Other Subcategory
                input#input41-other.form-input(name='', type='text', placeholder='Enter the subcategory', value='')
              p
                label(for='input2') Description 
                input#input2.form-input(name='description', type='text', placeholder='Input a description of the standard', value='')
              p
                label(for='input3') License 
                input#input3.form-input(name='license', type='text', placeholder='Input the license of the standard', value='')
              p
                label(for='input4') Last Updated
                input#input4.form-input(name='updated', type='text', placeholder='(YYYY-MM-DD) Ex: Sept. 29th, 2007 -- 2007-09-29', value='')
              p
                label(for='input5') Version 
                input#input5.form-input(name='version', type='text', placeholder='Input the version number of the standard', value='')
              p
                label(for='input7') Stage in Development 
                select#input7.form-input(type='drop-down', name='stage_in_development')
                  | <
                  option(value='') Select the stage in development
                  option(value='Completed') Completed
                  option(value='Draft') Draft
              p
                label(for='input9') URL to Documentation
                input#input9.form-input(name='documentation', type='text', placeholder="Copy a URL link to the standard's documentation or reference", value='')
              p
                label(for='input10') URL to Example 
                input#input10.form-input(name='example', type='text', placeholder='Copy a URL link to an example file or schema using the standard', value='')
              p
                label(for='input11') Publisher(s) 
                input#input11.form-input(name='publisher', type='text', placeholder='List the actors in charge of the standard’s conception and further development', value='')
              p
                label(for='input12') Publisher(s) Reputation 
                input#input12.form-input(name='publisher_reputation', type='text', placeholder='Provide background information about the publisher(s)', value='')
              p
                label(for='input14') List the Providers
                input#input14.form-input(name='consumers', type='text', placeholder='Provide a list of municipalities or organizations who publish data in the standard', value='')
              p
                label(for='input16') List the Apps
                input#input16.form-input(name='apps', type='text', placeholder='Provide a list of applications developed from the standard', value='')
              p
                label(for='input17') Open License 
                a(data-toggle='tooltip', title='Open License: What qualifies a standard as being “open” is debated. However, openness may be inferred when the standard is published under an open license. Open licenses iterate that anyone has the right to repurpose and share the material without restriction. Examples of open licenses include public domain licenses, the UK Open Government License v3, creative commons licenses, and open data common licenses (World Bank, Open Data Essentials)')
                  i#label17.fa.fa-question-circle(aria-hidden='true')
                label.checkbox
                  input#input17(type='checkbox', name='open', value='Yes')
                  |  Yes
                label.checkbox
                  input#input17(type='checkbox', name='open', value='No')
                  |  No
                label.checkbox
                  input#input17(type='checkbox', name='open', value='No Data')
                  |  No Data
              p
                label(for='input18') Transferable 
                a(data-toggle='tooltip', title='Transferable: There is a hierarchy regarding the ease of implementation for a standard. For example, CSV format of a standard requires a minimal degree of resources and technical knowledge. On the other hand, more complex and sophisticated ways of formatting standards, such as RDF and SOAP, are not as easy for municipal bodies to implement. More often than not, sophisticated formats tend not to be manageable for municipal actors that lack resources and technical background. Standards that handle dynamic data and cURL APIs exemplify more complex ways of publishing city datasets.')
                  i#label18.fa.fa-question-circle(aria-hidden='true')
                label.checkbox
                  input#input18(type='checkbox', name='transferability', value='Yes')
                  |  Yes
                label.checkbox
                  input#input18(type='checkbox', name='transferability', value='No')
                  |  No
                label.checkbox
                  input#input18(type='checkbox', name='transferability', value='No Data')
                  |  No Data
              p.rationale
                label(for='input19') Rationale 
                // Where user can enter their name
                input#input19.form-input(name='transferability_rationale', type='text', placeholder='Input a rationale for your selection', value='')
              p
                label(for='input19') Stakeholder Participation 
                a(data-toggle='tooltip', title='Stakeholder Participation: Stakeholders for a standard include civil society, government, and the private sector. An open standard should aim to include all types of stakeholders in its conception and maintenance. Types of stakeholder participation can be inferred based on the types of publisher reputations.')
                  i#label19.fa.fa-question-circle(aria-hidden='true')
                label.checkbox
                  input#input19(type='checkbox', name='stakeholder_participation', value='Yes')
                  |  Yes
                label.checkbox
                  input#input19(type='checkbox', name='stakeholder_participation', value='No')
                  |  No
                label.checkbox
                  input#input19(type='checkbox', name='stakeholder_participation', value='No Data')
                  |  No Data
              p.rationale
                label(for='input20') Rationale 
                // Where user can enter their name
                input#input20.form-input(name='stakeholder_participation_rationale', type='text', placeholder='Input a rationale for your selection', value='')
              p
                label(for='input21') Consensus-Based Governance 
                a(data-toggle='tooltip', title='Consensus-Based Governance: Standardization implies an ongoing dialogue between producers and consumers of data. It is important to note that consensus-based governance does not mean that all inputs are accepted if the majority agrees. Instead, consensus-based indicates a process willing to address any request pertaining to the standard’s statement of purpose.  A charter providing transparency of decisions about the standard’s evolution support a consensus-based approach. Consensus-based governance can be inferred by the presence of a mailing list or active working group for the standard.')
                  i#label21.fa.fa-question-circle(aria-hidden='true')
                label.checkbox
                  input#input21(type='checkbox', name='consensus_government', value='Yes')
                  |  Yes
                label.checkbox
                  input#input21(type='checkbox', name='consensus_government', value='No')
                  |  No
                label.checkbox
                  input#input21(type='checkbox', name='consensus_government', value='No Data')
                  |  No Data
              p.rationale
                label(for='input22') Rationale 
                input#input22.form-input(name='consensus_government_rationale', type='text', placeholder='Input a rationale for your selection', value='')
              p
                label(for='input23') Extensions 
                a(data-toggle='tooltip', title='Extensions: This column indicates the flexibility of a standard’s implementation. In addition, extensibility of a standard provides insight into how a standard is being implemented and enhanced for specific purposes.')
                  i#label23.fa.fa-question-circle(aria-hidden='true')
                label.checkbox
                  input#input23(type='checkbox', name='extensions', value='Yes')
                  |  Yes
                label.checkbox
                  input#input23(type='checkbox', name='extensions', value='No')
                  |  No
                label.checkbox
                  input#input23(type='checkbox', name='extensions', value='No Data')
                  |  No Data
              p.rationale
                label(for='input24') Extension Indicators 
                input#input24.form-input(name='extensions_indicators', type='text', placeholder='Input a rationale for your selection', value='')
              p
                label(for='input25') Machine Readable 
                a(data-toggle='tooltip', title='Machine Readable: Acceptable machine readable structures include XML, RSS feed, CSV, RDF, JSON, TXT, XLS(X), and KML formats. Formats that are not machine readable include PDF, HTML, DOC(X), anything scanned, anything faxed, and anything typed in an email (Suszan, 2014). Standard’s ought to compliment techniques to provide human and machine readable structures for the data. Publishing data as machine readable includes (1) established standard vocabularies, (2) enriching the HTML resources with metadata, semantics, and identifiers, (3) and implementing simple, manageable, and stable URIs (Bennett and Harvey, 2009). Data tables, according to the standard’s specification, should be normalized so to be incorporated into a relational database.')
                  i#label25.fa.fa-question-circle(aria-hidden='true')
                label.checkbox
                  input#input25(type='checkbox', name='machine_readable', value='Yes')
                  |  Yes
                label.checkbox
                  input#input25(type='checkbox', name='machine_readable', value='No')
                  |  No
                label.checkbox
                  input#input25(type='checkbox', name='machine_readable', value='No Data')
                  |  No Data
              p.rationale
                label(for='input26') Rationale 
                input#input26.form-input(name='machine_readable_rationale', type='text', placeholder='Input a rationale for your selection', value='')
              p
                label(for='input27') Human Readable 
                a(data-toggle='tooltip', title='Human Readable: Human readable requires a medium of data or information that can easily be understood by people. Therefore, the standard should encode the data by using easily identifiable text. Of course, there are semantic consideration for human readable standards. For example, there could be a variety of interpretive meanings associated with encoding the data through text.')
                  i#label16.fa.fa-question-circle(aria-hidden='true')
                label.checkbox
                  input#input27(type='checkbox', name='human_readable', value='Yes')
                  |  Yes
                label.checkbox
                  input#input27(type='checkbox', name='human_readable', value='No')
                  |  No
                label.checkbox
                  input#input27(type='checkbox', name='human_readable', value='No Data')
                  |  No Data
              p.rationale
                label(for='input28') Rationale 
                input#input28.form-input(name='human_readable_rationale', type='text', placeholder='Input a rationale for your selection', value='')
              p
                label(for='input29') Requires Real-Time Data 
                a(data-toggle='tooltip', title='Requires Up-To-Date Data: This metric varies depending on the domain of the data. Some domains require formats that handle data in real time. However, other domains may require that the standard specify that data be updated quarterly or annually. For example, standards that handle transit and road construction data would require a web feed format to deliver updates about developments as they occur. However, budget datasets only requires a quarterly or yearly update. In practice, many municipal publishers still publish data in static files.')
                  i#label29.fa.fa-question-circle(aria-hidden='true')
                label.checkbox
                  input#input29(type='checkbox', name='requires_realtime', value='Yes')
                  |  Yes
                label.checkbox
                  input#input29(type='checkbox', name='requires_realtime', value='No')
                  |  No
                label.checkbox
                  input#input29(type='checkbox', name='requires_realtime', value='No Data')
                  |  No Data
              p.rationale
                label(for='input30') Rationale 
                input#input30.form-input(name='requires_realtime_rationale', type='text', placeholder='Input a rationale for your selection', value='')
              p
                label(for='input31') Metadata Accounted 
                a(data-toggle='tooltip', title='Takes into Account Associated Metadata for the Dataset: This metric checks whether the standard schema requires metadata. A “yes” for this metric indicates a presence of both descriptive and structural metadata for the primary data. Each standard should readily make available the time and date of the data’s creation, the author, location of the data on the computer networks, and information about any standard applied to the raw data. Metadata should have embedded permanent and/or discoverable URIs and should utilize electronic citations of the data in the form of hyperlinks (Bennett and Harvey, 2009).')
                  i#label31.fa.fa-question-circle(aria-hidden='true')
                label.checkbox
                  input#input31(type='checkbox', name='metadata', value='Yes')
                  |  Yes
                label.checkbox
                  input#input31(type='checkbox', name='metadata', value='No')
                  |  No
                label.checkbox
                  input#input31(type='checkbox', name='metadata', value='No Data')
                  |  No Data
              p.rationale
                label(for='input32') Rationale 
                input#input32.form-input(name='metadata_rationale', type='text', placeholder='Input a rationale for your selection', value='')
              p.metadata
                label(for='input33') Recorded 
                input#input33.form-input(name='recorded', type='text', value='')
              p.metadata
                label(for='input34') Verified 
                input#input34.form-input(name='verified', type='text', value='No')
          br
          .popup.success
            | Thank you for your contribution. We will validate and release your contribution within 7 days.
          .popup.error
          button.submit.large(type='submit', value='add') Submit
      include footer.jade
    script.
      $('#contribute').addClass("selected-page");
      $(".popup").hide();
      $("#facet").on('change', function(){
        $("#add-tag-options").show();
        $("#facet-label").html($("#facet option:selected").text())
        // change tooltip text to selected facet description
        switch($(this).val()){
          case "subject":
            $("#facet-tooltip").attr('title', "This facet is used to separate tags specifying the subject matter a data standard is used to describe. Similar to the original purpose of the “Category” attribute, this facet is meant to classify non-exclusive descriptors specifying the content of a dataset in a standard. Values might include subjects more specific to a category such as “Financial”. For example, Checkbook NYC specifies annual budget, expenditure, and procurement contracts.");
            break;
          case "dataType":
            $("#facet-tooltip").attr('title', "Some standards specify a format in which data must be serialized, such as XML or CSV, while some standards merely specify element or attribute names, allowing users to publish in any machine-readable format. Some standards specify multiple data files in different formats. In such cases a standard can have multiple dataType tags for different formats. dataType can also be used to describe standards that don’t require static datasets. The tag “dataType:static” can be used to distinguish the former. Standards that don’t specify published datasets might have the values “metadata” or “ontology”. Standards used for data exchange between hardware systems (such as TCIP or EML) can also be distinguished from published static datasets with the tag “dataType:hardware”.");
            break;
          case "providerType":
            $("#facet-tooltip").attr('title', "This Directory was originally conceived to hold standards for governmental open data, yet some standards are used in the private sector or by non-governmental organizations. All standards currently in the Directory featuring a list of data providers are public-sector standards. Their associated lists include names of cities or government agencies. Many standards, such as WaterML are not used specifically in government publications and therefore might receive the values “public” and “private”. A third value, “non-profit” is likely also necessary to describe some open data standards.");
            break;
          case "language":
            $("#facet-tooltip").attr('title', "Most entries in the Directory require the use of English element names and attributes. Many standard publishers provide documentation in languages other than English that describe language compatibility issues and solutions.");
            break;
          case "keyword":
            $("#facet-tooltip").attr('title', "Any tags that do not describe a facet of a standard should be qualitative descriptors of the standard or other miscellaneous attributes. The value 'GitHub' can denote an open standard that is maintained on GitHub. The value 'CKAN' can denote a standard that is compatible with the CKAN open data system. The value 'API' should be given to standards whose publishers or a third party has provided an API for sharing data in that standard. Common qualitative keywords are 'transparency' and 'open government'.");
            break;
        }
        suggestTags();
      });
      $("#add-tag-button").on('click', function(){
        var facetText = $("#facet option:selected").text();
        var facetVal = $("#facet").val();
        var tagVal = $("#tag-value").val();
        var newButton = "<button type='button' class='tag' value='" + facetVal + ":" + tagVal + "'><strong style='color: gray' class='remove-tag'>X</strong> <b>" + facetText + "</b>" + tagVal + "</button>"
        $("#tag-display").append(newButton)
        //reset facet dropdown list and tag input
        $("#facet").prop('selectedIndex', 0)
        $("#add-tag-options").hide();
        //$("#tag-value").reset();
        //"X" to remove tag
        $(".remove-tag").on('click', function(){
          $(this).parent().remove();
        });
      });
      //concatenates values of all tags and sets value of hidden input
      //this input is what is found in add.js
      function serializeTags(){
        var tagsObject = '';
        $(".tag").each(function(){
          tagsObject += $(this).val() + "|";
        });
        $("#tags").val(tagsObject);
      }
      var allstandardsCategories = [];
      var allstandardsSubcategories = [];
      var options = document.getElementById("input37");
      var url = location.origin;
      // This function runs if a user selects the "Other" option for a category
      $("#input1").on('change', function(){
        var selectedCategory = document.getElementById("input1").value;
        if (selectedCategory == "other"){
          $(this).removeAttr("name");
          $("#input1-other").show();
          $(".category").show();
          $("#input1-other").attr("name", "category");
        } else {
          $("#input1-other").hide();
          $(".category").hide();
          $("#input1-other").removeAttr("name");
          $(this).attr("name", "category");
        }
      });
      // This function runs if a user selects the "Other" option for a subcategory
      $("#input41").on('change', function(){
        var selectedSubcategory = document.getElementById("input41").value;
        if (selectedSubcategory == "other"){
          $(this).removeAttr("name");
          $("#input41-other").show();
          $(".subcategory").show();
          $("#input41-other").attr("name", "subcategory");
        } else {
          $("#input41-other").hide();
          $(".subcategory").hide();
          $("#input41-other").removeAttr("name");
          $(this).attr("name", "subcategory");
        }
      });
      // this function toggles between the short and long form for adding a standard
      $(".hide-show").on('click', function(){
        $(this).find('i').toggleClass('fa-plus-circle fa-minus-circle') // toggle between the + and - icons
        var form = $(".add-standard"); // find the standard that the client has clicked on
        var shortform = $('.shortform');
        var test = $(form).children('p');
        $(form).children('p').not('.shortform').not(this).not('.metadata').toggle(); // show the details
        $(".category").hide();
        $(".subcategory").hide();
      })
      // This function fills in #input1 dropdown menu
      $.getJSON(url + "/api/get/all", function(standards) {
        $.each(standards.data, function(i) {
          if (standards.data[i].verified == 'Yes'){ // so categories of submitted but unverified standards aren't included in list
            allstandardsCategories.push(standards.data[i].category);
            allstandardsSubcategories.push(standards.data[i].subcategory);
          }
        });
        var newID = standards.data.length + 1;
        document.getElementById("input6").value = newID.toString();  // adds new unique ID to submission      
        allstandardsCategories.sort();
        allstandardsSubcategories.sort();
        
        var category = [],
            catOptions = document.getElementById("input1");
        $.each(allstandardsCategories, function(i, el){ // removes any duplicates
        if($.inArray(el, category) === -1) category.push(el);
        });
        $.each(category, function(i, el){
          catOptions.innerHTML += '<option value="' + category[i] + '">' + category[i] + '</option>';
        });
        catOptions.innerHTML += '<option value="other">Other</option>';
        
        var subcategory = [],
            subcatOptions = document.getElementById("input41");
        $.each(allstandardsSubcategories, function(i, el){ // removes any duplicates
          if(el.indexOf(",") != -1){
            var subcatArr = el.split(",")
            for(d in subcatArr){
              if($.inArray(subcatArr[d], subcategory) == -1) subcategory.push(subcatArr[d])
            }
          }
          else{
            if($.inArray(el, subcategory) === -1) subcategory.push(el);
          }
        });
        $.each(subcategory, function(i, el){
          subcatOptions.innerHTML += '<option value="' + subcategory[i] + '">' + subcategory[i] + '</option>';
        });
        subcatOptions.innerHTML += '<option value="other">Other</option>';
      });
      // submit form
      $(".submit").click(function(){
        serializeTags();
      });
